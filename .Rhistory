library(ggplot2)
knitr::opts_chunk$set(echo = FALSE)
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
# Remplace 000000 a continuación por su número de resgistro y no edite nada más en este bloque
NroReg = 900071
d1 = floor( NroReg/10^5 )
d2 = floor( (NroReg - d1*10^5)/10^4 )
d3 = floor( (NroReg - d1*10^5 - d2*10^4)/10^3 )
d4 = floor( (NroReg - d1*10^5 - d2*10^4 - d3*10^3)/10^2 )
d5 = floor( (NroReg - d1*10^5 - d2*10^4 - d3*10^3 - d4*10^2)/10^1)
d6 = floor( (NroReg - d1*10^5 - d2*10^4 - d3*10^3 - d4*10^2 - d5*10^1)/10^0)
# Ingrese en este bloque de código las librerías que utilizará
library(ggplot2)
library(flextable)
library(tidyverse)
f <- function(x){
fn <-  2*sin(x) - exp(10/x)
return(fn)
}
x <- seq(10,30,by = 0.5)
fx <- f(x)
df <- data.frame(x,fx)
grafico = ggplot(data = df)+
aes(x = x, y= fx) +
geom_line(linetype= 1, colour="darkblue")+
geom_hline(yintercept= 0, linetype =1)+
geom_vline(xintercept = 0, linetype =1)
grafico
#TIENE 4 RAICES EN EL INTERVALO [10,30]
# En este bloque, aplique el algoritmo de NR para hallar las raíces. No olvide imprimir los resultados.
# Incluya aquí mismo cualquier cálculo adicional que requiera.
##calculo la derivada
funcion <- expression(2*sin(x) - exp(10/x))
fprima <- D(funcion,"x")
fprima
df <- function(x){
pn<- 2 * cos(x) + exp(10/x) * (10/x^2)
return(pn)
}
NewtonRapshon <- function(p0,Tol,N){ ##No hay que darle como argumnetos la funcion y su derivada, sino que hay que invocarlas directamente.
#Paso 1
i = 1
#Paso 2
while (i <= N){
#Paso 3
p = p0 - f(p0)/df(p0)  #Cambiaria el cociente, la funcion va en el nuemrador y la derivada en el denominador
#Paso 4
if (abs(p0-p) < Tol){
return(p0)
}#Falta abrir la "{}" para especificar el codigo que se va a ejecutar si cumplela condicion
#Paso 5
i = i + 1
#Paso 6
p0 = p
}
#Paso 7
return(paste('El método falla luego de ', N, ' iteraciones')) #N iteraciones debe ir en mayusculas ya que R discrimina los caracteres en este sentido
}
## Hago zoom al grafico
grafico = grafico +
scale_x_continuous(name = "x", limits= c(15,30),breaks = seq(15,30,by = 2))+
scale_y_continuous(name = "fx", limits = c(-1,1),breaks = seq(-1,1,by=1))
##uso el algoritmo tomando aproximaciones iniciales cercanas a cada raiz
NewtonRapshon(20,10^-3,100) #raiz1
NewtonRapshon(21,10^-3,100) #raiz2
NewtonRapshon(26,10^-3,100) #raiz 3
NewtonRapshon(27.5,10^-3,100)#raiz 4
NewtonRapshon <- function(p0,Tol,N){ ##No hay que darle como argumnetos la funcion y su derivada, sino que hay que invocarlas directamente.
#Paso 1
i = 1
#Paso 2
while (i <= N){
#Paso 3
p = p0 - f(p0)/df(p0)  #Cambiaria el cociente, la funcion va en el nuemrador y la derivada en el denominador
#Paso 4
if (abs(p0-p) < Tol){
return(p0)
}#Falta abrir la "{}" para especificar el codigo que se va a ejecutar si cumplela condicion
#Paso 5
i = i + 1
#Paso 6
p0 = p
print(p0) ##Agrego el print, para que me imprima cada iteracion que va haciendo
}
#Paso 7
return(paste('El método falla luego de ', N, ' iteraciones')) #N iteraciones debe ir en mayusculas ya que R discrimina los caracteres en este sentido
}
x0 = 24 - ifelse(d4!=0,d4,ifelse(d5!=0,d5,d6))
Iteraciones = ifelse(d4>=2,d4,ifelse(d5>=2,d5,d6))
NewtonRapshon(x0,10^-3,Iteraciones)
##
# Ingrese aquí la función con el algoritmo que programó del método de Regula Falsi
Funcion <- function(x){
f <- x^2 * cos(x)
return(f)
}
Falsa_Posicion <- function(p0, p1 , tol , n){
i=2
q0=Funcion(p0)
q1=Funcion(p1)
while(i<=n){
p=p1 - q1*(p1 - p0)/(q1 - q0)
if(abs(p-p1) < tol){
return(p)
}
i= i+1
q = Funcion(p)
if(q*q1 <0){
p0=p1
q0=q1
}
p1=p
q1=q
}
return(paste("El metodo fallo luego de ",n," iteraciones"))
}
##grafico para elegir aprox iniciales
x <- seq(0,3*pi,by = 0.5) #Generamos un vector "x" para crear los puntos en F(x)
fx <- Funcion(x) #Creamos los valores de f(x)
df <- data.frame(x, fx)
grafico = ggplot(data = df)+
aes(x = x, y= fx) +
geom_line(linetype= 1, colour="darkblue")+
geom_hline(yintercept= 0, linetype =1)+
geom_vline(xintercept = 0, linetype =1)
#Veo que tiene 4 raices, las dos primeras no las distingo
#Achico el grafico
grafico = grafico +
scale_x_continuous(name = "x", limits= c(0,2.5),breaks = seq(0,2.5,by = 0.5))+
scale_y_continuous(name = "fx", limits = c(-3,2),breaks = seq(-3,2,by=1))
#Imprimo las Raices
Funcion(0) #raiz 1 = 0, lo veo en el grafico
Falsa_Posicion(1.5,1.7,10^-3,100) #raiz2
Falsa_Posicion(4,5,10^-3,100)#raiz3
Falsa_Posicion(7.5,9, 10^-3,100) #raiz4
grafico
x <- seq(0,3*pi,by = 0.5) #Generamos un vector "x" para crear los puntos en F(x)
fx <- Funcion(x) #Creamos los valores de f(x)
df <- data.frame(x, fx)
Funcion <- function(x){
f <- x^2 * cos(x)
return(f)
}
x <- seq(0,3*pi,by = 0.5) #Generamos un vector "x" para crear los puntos en F(x)
fx <- Funcion(x) #Creamos los valores de f(x)
df <- data.frame(x, fx)
grafico = ggplot(data = df)+
aes(x = x, y= fx) +
geom_line(linetype= 1, colour="darkblue")+
geom_hline(yintercept= 0, linetype =1)+
geom_vline(xintercept = 0, linetype =1)
grafico
grafico = grafico +
scale_x_continuous(name = "x", limits= c(0,2.5),breaks = seq(0,2.5,by = 0.5))+
scale_y_continuous(name = "fx", limits = c(-3,2),breaks = seq(-3,2,by=1))
grafico
grafico = ggplot(data = df)+
aes(x = x, y= fx) +
geom_line(linetype= 1, colour="darkblue")+
geom_hline(yintercept= 0, linetype =1)+
geom_vline(xintercept = 0, linetype =1)+
geom_point(aes(x =Falsa_Posicion(1.5,1.7,10^-3,100),
y = 0),pch = 16, col = "red")+
geom_point(aes(x =Falsa_Posicion(4,5,10^-3,100),
y = 0),pch = 16, col = "red")+
geom_point(aes(x =Falsa_Posicion(7.5,9,10^-3,100),
y = 0),pch = 16, col = "red")+
geom_point(aes(x =0,
y = 0),pch = 16, col = "red")
grafico
set.seed(NroReg)
datos = matrix(rnorm(3000,10,2),nrow = 1000, ncol = 3)
A = round(cor(datos),4)
rm(datos)
B = matrix(round(rnorm(16,20,5),0),nrow = 4, ncol = 4)
A = `r write_matex2(A)`
A = write_matex2(A)
View(A)
set.seed(900071)
datos = matrix(rnorm(3000,10,2),nrow = 1000, ncol = 3)
A = round(cor(datos),4)
A
View(A)
##Verificar
options(scipen= 9999)
