#Derivada respecto a alfa
alfa = 3 + 10^-10 #Variacion infinitesimal
beta = 1
gamma = function(t){
val = t^(x-1) * exp(-t)
return(val)
}
x=alpha
Gamma_alpha = simpson.compuesto(0,1000,1000,gamma)
x=beta
Gamma_beta = simpson.compuesto(0,1000,1000,gamma)
x=alpha + beta
Gamma_alpha_beta = simpson.compuesto(0,1000,1000,gamma)
fn <- function(x){
return(x * (Gamma_alpha_beta / (Gamma_alpha * Gamma_beta)) * x^(alpha-1) * (1-x)^(beta -1))
}
E_Y_h <- simpson.compuesto(0,1,100,fn)
E_Y_h
Derivada_respecto_a_alpha = (E_Y_h - E_Y) / (10^-10)
Derivada_respecto_a_alpha
#3.2
#Derivada respecto a alfa
alpha = 3 + 10^-10 #Variacion infinitesimal
beta = 1
gamma = function(t){
val = t^(x-1) * exp(-t)
return(val)
}
x=alpha
Gamma_alpha = simpson.compuesto(0,1000,1000,gamma)
x=beta
Gamma_beta = simpson.compuesto(0,1000,1000,gamma)
x=alpha + beta
Gamma_alpha_beta = simpson.compuesto(0,1000,1000,gamma)
fn <- function(x){
return(x * (Gamma_alpha_beta / (Gamma_alpha * Gamma_beta)) * x^(alpha-1) * (1-x)^(beta -1))
}
E_Y_h <- simpson.compuesto(0,1,100,fn)
E_Y_h
Derivada_respecto_a_alpha = (E_Y_h - E_Y) / (10^-10)
Derivada_respecto_a_alpha
#3.2 ----
#Derivada respecto a B
alpha = 3 + 10^-10
beta = 1 + 10^-10 #Variacion infinitesimal
gamma = function(t){
val = t^(x-1) * exp(-t)
return(val)
}
x=alpha
Gamma_alpha = simpson.compuesto(0,1000,1000,gamma)
x=beta
Gamma_beta = simpson.compuesto(0,1000,1000,gamma)
x=alpha + beta
Gamma_alpha_beta = simpson.compuesto(0,1000,1000,gamma)
fn <- function(x){
return(x * (Gamma_alpha_beta / (Gamma_alpha * Gamma_beta)) * x^(alpha-1) * (1-x)^(beta -1))
}
E_Y_h <- simpson.compuesto(0,1,100,fn)
E_Y_h
Derivada_respecto_a_alpha = (E_Y_h - E_Y) / (10^-10)
Derivada_respecto_a_alpha
#3.2 ----
#Derivada respecto a B
alpha = 3
beta = 1 + 10^-10 #Variacion infinitesimal
gamma = function(t){
val = t^(x-1) * exp(-t)
return(val)
}
x=alpha
Gamma_alpha = simpson.compuesto(0,1000,1000,gamma)
x=beta
Gamma_beta = simpson.compuesto(0,1000,1000,gamma)
x=alpha + beta
Gamma_alpha_beta = simpson.compuesto(0,1000,1000,gamma)
fn <- function(x){
return(x * (Gamma_alpha_beta / (Gamma_alpha * Gamma_beta)) * x^(alpha-1) * (1-x)^(beta -1))
}
E_Y_h <- simpson.compuesto(0,1,100,fn)
E_Y_h
Derivada_respecto_a_Beta = (E_Y_h - E_Y) / (10^-10)
Derivada_respecto_a_Beta
Gamma_beta
print("Gamma_beta no puede ser <1 porque si no la funcion no converge a ningun numero")
derivada3ptos_Progresiva_Endpoint2 <- function(x,y,xindice){
n = length(y)
yprima = c(rep(NA,n))
h = diff(x)[1]
yprima[xindice] = (-y[xindice-1] + y[xindice+1])/(2*h)
return(yprima[xindice])
}
#### EJERCICIO 2 #####
r <- seq(0,0.12, by=0.01)
Pr <- c(115.3371, 109.7031,104.8099,100.0653,95.3516,91.1998,87.2676,83.5825,79.9116,76.8435,73.9473,70.0320,67.7022)
df <- data.frame(r,Pr)
derivada3ptos_Progresiva_Endpoint<- function(fx, h) {
return((1/(2*h))*(-3*fx[1]+4*fx[2]-fx[3]))
}
derivada3ptos_Progresiva_Endpoint2 <- function(x,y,xindice){
n = length(y)
yprima = c(rep(NA,n))
h = diff(x)[1]
yprima[xindice] = (-y[xindice-1] + y[xindice+1])/(2*h)
return(yprima[xindice])
}
derivada3ptos_Progresiva_Endpoint2(x,y,0.04)
derivada3ptos_Progresiva_Endpoint2(r,Pr,0.04)
# 2.1 Derivada Primera ----
Derivada_0.03 = derivada3ptos_Progresiva_Endpoint(fx = c(100.0653, 95.3516, 91.1998), h = 0.01)
Derivada_0.03
Derivada_0.04 = derivada3ptos_Progresiva_Endpoint(fx = c(95.3516,91.1998,87.4676),0.01)
Derivada_0.04
derivada3ptos_Progresiva_Endpoint2(r,Pr,4)
derivada3ptos_Progresiva_Endpoint2 <- function(x,y,xindice){
n = length(y)
yprima = c(rep(NA,n))
h = diff(x)[1]
yprima[xindice] = (-y[xindice-1] + y[xindice+1])/(2*h)
return(yprima[xindice])
}
derivada3ptos_Progresiva_Endpoint2(r,Pr,4)
# 2.1 Derivada Primera ----
Derivada_0.03 = derivada3ptos_Progresiva_Endpoint(fx = c(100.0653, 95.3516, 91.1998), h = 0.01)
Derivada_0.03
# 2.1 Derivada Primera ----
Derivada_0.03 = derivada3ptos_Progresiva_Endpoint(r,Pr,4) #Indice del 0.03 es 4
#### EJERCICIO 2 #####
r <- seq(0,0.12, by=0.01)
Pr <- c(115.3371, 109.7031,104.8099,100.0653,95.3516,91.1998,87.2676,83.5825,79.9116,76.8435,73.9473,70.0320,67.7022)
derivada3ptos_Progresiva_Endpoint <- function(x,y,xindice){
n = length(y)
yprima = c(rep(NA,n))
h = diff(x)[1]
yprima[xindice] = (-y[xindice-1] + y[xindice+1])/(2*h)
return(yprima[xindice])
}
# 2.1 Derivada Primera ----
Derivada_0.03 = derivada3ptos_Progresiva_Endpoint(r,Pr,4) #Indice del 0.03 es 4
Derivada_0.03
Derivada_0.04 = derivada3ptos_Progresiva_Endpoint(r,Pr,5) #Indice del 0.04 es 5
Derivada_0.04
#2.2 Derivada Segunda ----
derivada_segunda = function(x, y, xindice){
h = diff(x)[1]
n = length(y)
yprima = c(rep(NA,n))
if(missing(xindice)){
for (i in 2:(n - 1)) {
yprima[i] = (y[i-1] - 2*y[i] + y[i+1])/(h^2)
}
tabla = cbind.data.frame(x, y, yprima)
return(tabla)
}
else{
if(xindice == 1 || xindice == n){
return("Este valor no se puede calcular")
}
else{
yprima[xindice] = (y[xindice-1] - 2*y[xindice] + y[xindice+1])/(h^2)
return(yprima[xindice])
}
}
}
Derivada_Segunda_0.03 = derivada_segunda(r,Pr,0.03)
Derivada_Segunda_0.03
Derivada_Segunda_0.04 = derivada_segunda(r,Pr,0.04)
Derivada_Segunda_0.04
Derivada_Segunda_0.03 = derivada_segunda(r,Pr,4)
Derivada_Segunda_0.03
Derivada_Segunda_0.04 = derivada_segunda(r,Pr,5)
Derivada_Segunda_0.04
x<- c(1.6579,3.8119,4.1155,5.1111,6.0537,6.2298,11.6898,11.7199,12.7634)
Fx <- c(0.1111,0.2222,0.3333,0.4444,0.5556,0.6667,0.7778,0.8889,1)
#3.1 ----
Lagrange<-function(x,x_dado,f_dado){ ###
Pol<-0
n<-length(x_dado)
Aux<-c(rep(1,n))
for (k in 1:n){
for(i in 1:n){
if(k != i){
Aux[k]<-Aux[k]*((x-x_dado[i])/(x_dado[k]-x_dado[i]))
}
}
Pol<- Pol+f_dado[k]*Aux[k]
}
return(Pol)
}
F12.2416 <- Lagrange(12.2416,x,Fx)
F12.2416
x2 <-c(x[7],x[8],x[9])
x2
Fx2 <- c(Fx[7],Fx[8],Fx[9])
Fx2
Lagrange(12.2416,x2,Fx2)
x3 <-c(x[8],x[9])
x3
Fx3<-c(Fx[8],Fx[9])
Fx3
Lagrange(12.2416,x3,Fx3)
#3.2 ----
Natural_Cubic_Spline_SoloPol = function(A){
#Variables iniciales
x = A[,1]
fx = A[,2]
if(length(x)!=length(fx)){
return("La cantidad de argumentos no coincide")
}
n = length(A[,1]); b = c(rep(NA,n)); c = c(rep(NA,n)); d = c(rep(NA,n)); h = c(rep(NA,n))
a = c(rep(NA,n)); l = c(rep(NA,n)); u = c(rep(NA,n)); z = c(rep(NA,n))
#Paso 1 y 2 ----
for(i in 1:(n-1)){
h[i] = x[i+1]-x[i]
}
for(i in 2:(n-1)){
a[i] = ((3/(h[i])) * (fx[i+1]- fx[i])) - ((3/(h[i-1])) * (fx[i]- fx[i-1]))
}
#Paso 3
l[1] = 1;u[1] = 0;z[1] = 0
#Paso 4
for(i in 2:(n-1)){
l[i] = 2*(x[i+1] - x[i-1]) - (h[i-1]*u[i-1])
u[i] = h[i]/l[i]
z[i] = (a[i]- h[i-1]*z[i-1])/l[i]
}
#Paso 5
l[n] = 1 ;z[n] = 0;c[n] = 0
#Paso 6
for(j in (n-1):1){
c[j] = z[j] - (u[j]*c[j+1])
b[j] = ((fx[j+1] - fx[j])/h[j]) - h[j]*(c[j+1] + 2*c[j])/3
d[j] = (c[j+1] - c[j])/(3*h[j])
}
Pol = NULL
for(i in 1:(n-1)){
Pol = c(Pol,paste("",round(fx[i],4),"+(",round(b[i],4),"*(x-",round(x[i],4),"))+(",round(c[i],4),"*((x-",round(x[i],4),")^2))+(",round(d[i],4),"*((x-",round(x[i],4),")^3))   para todo x perteneciente a [",x[i],",",x[i+1],"]",sep = ""))
}
Pol = matrix(Pol,nrow = (n-1), ncol = 1, byrow = T)
e = NULL
for(i in 1:(n-1)){
e = c(e,paste("S.",i,"(x) = ",sep = ""))
}
dimnames(Pol) = list(e,NULL)
return(Pol)
}
A <- cbind(x,Fx)
Polinomios = Natural_Cubic_Spline_SoloPol(A)
Polinomios
Natural_Cubic_Spline_Interpola_en_Punto = function(A,xk){
#Variables iniciales
x = A[,1]
fx = A[,2]
if(length(x)!=length(fx)){
return("La cantidad de argumentos no coincide")
}
n = length(A[,1]); b = c(rep(NA,n)); c = c(rep(NA,n)); d = c(rep(NA,n)); h = c(rep(NA,n))
a = c(rep(NA,n)); l = c(rep(NA,n)); u = c(rep(NA,n)); z = c(rep(NA,n))
#Paso 1 y 2 ----
for(i in 1:(n-1)){
h[i] = x[i+1]-x[i]
}
for(i in 2:(n-1)){
a[i] = ((3/(h[i])) * (fx[i+1]- fx[i])) - ((3/(h[i-1])) * (fx[i]- fx[i-1]))
}
#Paso 3 ----
l[1] = 1;u[1] = 0;z[1] = 0
#Paso 4 ----
for(i in 2:(n-1)){
l[i] = 2*(x[i+1] - x[i-1]) - (h[i-1]*u[i-1])
u[i] = h[i]/l[i]
z[i] = (a[i]- h[i-1]*z[i-1])/l[i]
}
#Paso 5 ----
l[n] = 1 ;z[n] = 0;c[n] = 0
#Paso 6 ----
for(j in (n-1):1){
c[j] = z[j] - (u[j]*c[j+1])
b[j] = ((fx[j+1] - fx[j])/h[j]) - h[j]*(c[j+1] + 2*c[j])/3
d[j] = (c[j+1] - c[j])/(3*h[j])
}
#interpolacion en el punto ----
for(i in 1:(n-1)) {
if(x[i]<= xk & x[i+1]>= xk){
s = i}
} #Nos fijamos a que polinomio pertenece el valor a interpolar
yk = fx[s]+b[s]*(xk-x[s])+c[s]*(xk-x[s])^2+d[s]*(xk-x[s])^3 #Lo valuamos en el polinomio correspondiente
return(yk)
}
Interpolacion_en_Punto <- Natural_Cubic_Spline_Interpola_en_Punto(A,12.7634)
Interpolacion_en_Punto
Funcion_que_interpola <- function(x){
f <- 0.8889+(3.6047*(x-11.7199))+(-5.0286*((x-11.7199)^2))+(1.6063*((x-11.7199)^3))
return(f)
}
Interpolacion_en_Pto <- Funcion_que_interpola(12.7634)
Interpolacion_en_Pto
#Polinomio A ----
x_i <-c(0,0.25,0.5,0.75)
f_i <-c(1,1.64872,2.71828,4.48169)
InterpolacionNewton_3.2(x_i,f_i)
DATOS <- data.frame(x,Fx)
plot(Datos)
Datos <- data.frame(x,Fx)
plot(Datos)
abline(h=c(0,1), col = 'lightgrey')
Modelo = nls(fx ~ pnorm(x,mu,sigma),
data = Datos,
start=list(mu=120,sigma=50))
summary(Modelo)
AjusteNL = data.frame(x=seq(from = min(Datos$x), to = max(Datos$x), lenght.out = 1000))
AjusteNL$fit = predict(Modelo, newdata = list(x=AjusteNL$x))
lines(AjusteNL$x,AjusteNL$fit,col='red', lty= 'dashed')
mu_muestra = mean(Datos$x)
sigma_muestra = sd(Datos$x)
curve(pnorm(x,mu_muestra,sigma_muestra), col = 'blue', add = T,
from = min(Datos$x), to = max(Datos$x))
legend('bottomright',
legend = c('Datos','NLS','Momentos'),
lty = c(0,2,1), pch = c(1,NA,NA),
col= c('black','red','blue'))
title('Ajuste de datos a Distribucion Normal', cex= 0.8)
Modelo = nls(fx ~ pnorm(x,mu,sigma),
data = Datos,
start=list(mu=120,sigma=50))
Int_Trapecio = function(a, b,fn){
h = (b - a)/1
xo = a
x1 = b
result = (h/2)*(fn(xo) + fn(x1))
return(result)
}
Int_Simpson <- function(a,b,fn){
h = (b - a) /2
xo = a
x2 = b
x1 = (xo + x2)/2
#x1a = a + (b -a)/2
result = (h/3)*(fn(xo) + 4*fn(x1) + fn(x2))
return(result)
}
Int_Simpson38 <- function(a,b,fn){
h = (b - a)/3
xo = a
x3 = b
x1 = xo + h
x2 = xo + 2*h
result = ((3/8)*h)*(fn(xo) + 3*fn(x1) + 3*fn(x2) + fn(x3))
return(result)
}
alpha = 2.52
theeta = 1.32
#2.1 ----
a = 0.25
b = 5
#Con trapecio
gamma <- function(x){
val <- x^(alpha -1) * exp(-x)
return(val)
}
Gamma_Alpha_Trapecio = Int_Trapecio(0, 1000,gamma) #Tomo de 0 a 1000, aproximando el infinito
Gamma_Alpha_Trapecio
Gamma_Alpha_Simpson = Int_Simpson(0,1000,gamma)
Gamma_Alpha_Simpson
Gamma_Alpha_Simpson38 = Int_Simpson38(0, 1000,gamma)
Gamma_Alpha_Simpson38
#Cargamos la funcion y
fn_Trapecio <- function(x){
val = ((x/theeta)^alpha *exp(-x/theeta)) / ( x * Gamma_Alpha_Trapecio)
return(val)
}
Prob_Y_Trapecio <- Int_Trapecio(a,b,fn_Trapecio)
Prob_Y_Trapecio
print("Utiliza los nodos y0,y1")
fn_Simpson <- function(x){
val = ((x/theeta)^alpha *exp(-x/theeta)) / ( x * Gamma_Alpha_Simpson)
return(val)
}
Prob_Y_Simpson <- Int_Simpson(a,b,fn_Simpson)
Prob_Y_Simpson
print("Utiliza los nodos y0,y1,y2")
fn_Simpson38 <- function(x){
val = ((x/theeta)^alpha *exp(-x/theeta)) / ( x * Gamma_Alpha_Simpson38)
return(val)
}
Prob_Y_Simpson38 <- Int_Simpson38(a,b,fn_Simpson38)
Prob_Y_Simpson38
print("Utiliza los nodos y0,y1,y2,y3")
#Con trapecio
gamma <- function(x){
val <- x^(alpha -1) * exp(-x)
return(val)
}
Gamma_Alpha_Trapecio = Int_Trapecio(0, 10000,gamma) #Tomo de 0 a 1000, aproximando el infinito
Gamma_Alpha_Trapecio
Gamma_Alpha_Simpson = Int_Simpson(0,10000,gamma)
Gamma_Alpha_Simpson
Gamma_Alpha_Simpson38 = Int_Simpson38(0, 10000,gamma)
Gamma_Alpha_Simpson38
#Cargamos la funcion y
fn_Trapecio <- function(x){
val = ((x/theeta)^alpha *exp(-x/theeta)) / ( x * Gamma_Alpha_Trapecio)
return(val)
}
Prob_Y_Trapecio <- Int_Trapecio(a,b,fn_Trapecio)
Prob_Y_Trapecio
print("Utiliza los nodos y0,y1")
fn_Simpson <- function(x){
val = ((x/theeta)^alpha *exp(-x/theeta)) / ( x * Gamma_Alpha_Simpson)
return(val)
}
Prob_Y_Simpson <- Int_Simpson(a,b,fn_Simpson)
Prob_Y_Simpson
print("Utiliza los nodos y0,y1,y2")
fn_Simpson38 <- function(x){
val = ((x/theeta)^alpha *exp(-x/theeta)) / ( x * Gamma_Alpha_Simpson38)
return(val)
}
Prob_Y_Simpson38 <- Int_Simpson38(a,b,fn_Simpson38)
Prob_Y_Simpson38
#2.2 ----
simpson.compuesto = function(a, b, n){
if((n %% 2) == 0){
#Paso 1
h = (b-a)/n
#Paso 2
xio = fn(a) + fn(b)
xi1 = 0 #Suma impar
xi2 = 0 #Suma par
#Paso 3
for (i in 1:(n-1)) {
#Paso 4
x = a + i*h
#Paso 5
if((i %% 2) == 0){
xi2 = xi2 + fn(x)
}else{
xi1 = xi1 + fn(x)
}
}
#Paso 6
val = h*(xio + 2*xi2 + 4*xi1)/3
return(val)
}
else return("n debe ser par")
}
n=20
#2.2 ----
simpson.compuesto = function(a, b, n,fn){
if((n %% 2) == 0){
#Paso 1
h = (b-a)/n
#Paso 2
xio = fn(a) + fn(b)
xi1 = 0 #Suma impar
xi2 = 0 #Suma par
#Paso 3
for (i in 1:(n-1)) {
#Paso 4
x = a + i*h
#Paso 5
if((i %% 2) == 0){
xi2 = xi2 + fn(x)
}else{
xi1 = xi1 + fn(x)
}
}
#Paso 6
val = h*(xio + 2*xi2 + 4*xi1)/3
return(val)
}
else return("n debe ser par")
}
n=20
Gamma_Alpha_Simpson_Compuesto = simpson.compuesto(0,10000,20,gamma)
Gamma_Alpha_Simpson_Compuesto
#Cargamos la Funcion con Gamma de Alpha con Simpson Compuesto
fn_Simpson_Compuesto <- function(x){
val = ((x/theeta)^alpha *exp(-x/theeta)) / ( x * Gamma_Alpha_Simpson_Compuesto)
return(val)
}
Prob_Y_Simpson_Compuesto = simpson.compuesto(a,b,n,fn_Simpson_Compuesto)
Prob_Y_Simpson_Compuesto
#2.3 ----
trapecio.compuesto = function(a, b, n,fn){
h = (b-a)/n
xio = fn(a) + fn(b)
xi = 0
for (i in 1:(n-1)) {
x = a + i*h
xi = xi + fn(x)
}
val = h*(xio + 2*xi)/2
return(val)
}
n=1500
fn <- function(x){
val <- x^(alpha -1) * exp(-x)
return(val)
}
n=1500
Gamma_Alpha_Trapecio_Compuesto = trapecio.compuesto(0,10000,n,gamma)
Gamma_Alpha_Trapecio_Compuesto
#Cargamos la Funcion de la esperanza de Y con Gamma de Alpha con Trapecio Compuesto
fn_Trapecio_Compuesto <- function(x){
val = x* (((x/theeta)^alpha *exp(-x/theeta)) / ( x * Gamma_Alpha_Trapecio_Compuesto))
return(val)
}
E_Y <- trapecio.compuesto(0,10000,n,fn_Trapecio_Compuesto)
E_Y
E_Y <- trapecio.compuesto(0,1000,n,fn_Trapecio_Compuesto)
E_Y
