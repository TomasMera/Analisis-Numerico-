Marcha[1,"Saldo"] = sum(Amortizaciones[,"Amort"])
for (i in 1:(n+1)){
if(Marcha[i,"t"]== Amortizaciones[k,"t"]){
Marcha[i,"Amort"]=Amortizaciones[k,"Amort"]
if(i>1){Marcha[i,"Saldo"] = Marcha[i-1,"Saldo"] - Amortizaciones[k,"Amort"]}
k=k+1
}else{ #si no concide en el momento del tiempo
Marcha[i,"Amort"] = 0
if(i>1){Marcha[i,"Saldo"]= Marcha[i-1,"Saldo"]}
} #el saldo del momento i coincide con el saldo de i-1
}
#Columna "Int"
Marcha[1,"Int"] = 0
for(i in 2:(n+1)){
Marcha[i,"Int"] = Marcha[i-1,"Saldo"]*cupon/m
}
Marcha[,"C.F."] = Marcha[,"Amort"]+Marcha[,"Int"]
View(Marcha)
#3) Funcion de Precio ----
Precio <- function(tasa,t,CF){
n = length(CF)
P = 0
for (i in 1:n){
P = P + CF[i]*(1+tasa)^-t[i]
}
return(P)
}
Precio(cupon, Marcha[,"t"], Marcha[,"C.F."])
tasa1 = (1+cupon/2)^2-1
Precio(tasa1,Marcha[,"t"],Marcha[,"C.F."])
tasas <- seq(from = 0, to = 1, by = 0.001)
P <-  Precio(tasas, Marcha[,"t"], Marcha[,"C.F."])
#Para graficar:
DF_Graph1 <- data.frame(tasas,P)
ggplot(DF_Graph1, aes(tasas,P))+
geom_line(colour="red") +
geom_vline(xintercept=0)+
geom_hline(yintercept=0)+
theme_minimal()+
theme(text = element_text(size = 16), element_line(size = 0.4))
#4) Calculo de la TIR ----
PM = 67.90
#Cual es la tasa que hace que el precio sea 80
#suponiendo que el precio es 80, la tasa será del 20%
f <- function(r){
return(-PM+Precio(r,Marcha[,"t"], Marcha[,"C.F."]))}
DF_Graph2 <- data.frame(tasas,f(tasas))
ggplot(DF_Graph2, aes(tasas,f(tasas)))+
geom_line(colour="red") +
geom_vline(xintercept=0)+
geom_hline(yintercept=0)+
theme_minimal()+
theme(text = element_text(size = 16), element_line(size = 0.4))
# 5) Metodo de Biseccion para la resolucion del Ejerc TIR ----
Raiz_Biseccion = function(a,b,Tol,N){ #Tol is tolerance level and N number of iterations
#Step 1
i = 1
FA = polinomio(a)
#Step 2
while (1 <= N){ #la condicion esta entre parentesis.Se ejecuta mientras 1 sea menor o igual que n.
#Step 3
p = a + (b-a)/2 #punto medio
FP = polinomio (p) #calcular el polinomio en ese puntp p
#Step 4
if (FP==0 | (b-a)/2 < Tol){
p<- c(p,i) #Tira la cantidad de iteraciones
return (p)
}
#Step 5
i = i + 1
#Step 6
if (FP * FA> 0){
a = p #a pasa a ser el punto medio
FA = FP #F(a) pasa a ser la imagen de p
} else { #si no se cumple
b = p #b es el punto medio del intervalo
}
}
#Step 7
return (paste("El metodo falló luego de ", N, "iteraciones"))
}
polinomio = function (r){
f = -PM+Precio(r,Marcha[,"t"], Marcha[,"C.F."])
return (f)
}
Raiz_Biseccion(0.001,0.5,0.000001,100)
#0.1580806
cupon = 0.16 #Mi TNA
Amortizaciones = matrix(c(0.5,1,1.5,2, #momentos expresados en años cuando ocurres los ff
8,8,8,106),ncol=2,dimnames=list(NULL,c("t","Amort")))
m = 2 #numero de pagos de interes por anio.
#View(Amortizaciones)
#2) Marcha Progresiva ----
#Numero de flujos
n = max(Amortizaciones[,1]*m) #el n de flujos de efectivos es el max (tomo primer colunma de la matriz de amortizaciones)
#Tendre 8 flujos de efecctivo
Marcha = matrix(rep(NA,(n+1)*5),ncol=5)
#(n+1)*5 la cantidad de veces que quiero NA
colnames(Marcha)=c("t","Saldo","Amort","Int","C.F.")
#Completo las columnas
#Columna "t"
Marcha[,"t"] = seq(from=0, to=n/m, by= 1/m)
#Columna "Amort" y "Saldo"
k=1
Marcha[1,"Saldo"] = sum(Amortizaciones[,"Amort"])
for (i in 1:(n+1)){
if(Marcha[i,"t"]== Amortizaciones[k,"t"]){
Marcha[i,"Amort"]=Amortizaciones[k,"Amort"]
if(i>1){Marcha[i,"Saldo"] = Marcha[i-1,"Saldo"] - Amortizaciones[k,"Amort"]}
k=k+1
}else{ #si no concide en el momento del tiempo
Marcha[i,"Amort"] = 0
if(i>1){Marcha[i,"Saldo"]= Marcha[i-1,"Saldo"]}
} #el saldo del momento i coincide con el saldo de i-1
}
#Columna "Int"
Marcha[1,"Int"] = 0
for(i in 2:(n+1)){
Marcha[i,"Int"] = Marcha[i-1,"Saldo"]*cupon/m
}
Marcha[,"C.F."] = Marcha[,"Amort"]+Marcha[,"Int"]
View(Marcha)
#3) Funcion de Precio ----
Precio <- function(tasa,t,CF){
n = length(CF)
P = 0
for (i in 1:n){
P = P + CF[i]*(1+tasa)^-t[i]
}
return(P)
}
Precio(cupon, Marcha[,"t"], Marcha[,"C.F."])
tasa1 = (1+cupon/m)^m-1
Precio(tasa1,Marcha[,"t"],Marcha[,"C.F."])
tasas <- seq(from = 0, to = 1, by = 0.001)
P <-  Precio(tasas, Marcha[,"t"], Marcha[,"C.F."])
#Para graficar:
DF_Graph1 <- data.frame(tasas,P)
ggplot(DF_Graph1, aes(tasas,P))+
geom_line(colour="red") +
geom_vline(xintercept=0)+
geom_hline(yintercept=0)+
theme_minimal()+
theme(text = element_text(size = 16), element_line(size = 0.4))
PM = 67.90
#Cual es la tasa que hace que el precio sea 80
#suponiendo que el precio es 80, la tasa será del 20%
f <- function(r){
return(-PM+Precio(r,Marcha[,"t"], Marcha[,"C.F."]))}
DF_Graph2 <- data.frame(tasas,f(tasas))
ggplot(DF_Graph2, aes(tasas,f(tasas)))+
geom_line(colour="red") +
geom_vline(xintercept=0)+
geom_hline(yintercept=0)+
theme_minimal()+
theme(text = element_text(size = 16), element_line(size = 0.4))
# 5) Metodo de Biseccion para la resolucion del Ejerc TIR ----
Raiz_Biseccion = function(a,b,Tol,N){ #Tol is tolerance level and N number of iterations
#Step 1
i = 1
FA = polinomio(a)
#Step 2
while (1 <= N){ #la condicion esta entre parentesis.Se ejecuta mientras 1 sea menor o igual que n.
#Step 3
p = a + (b-a)/2 #punto medio
FP = polinomio (p) #calcular el polinomio en ese puntp p
#Step 4
if (FP==0 | (b-a)/2 < Tol){
p<- c(p,i) #Tira la cantidad de iteraciones
return (p)
}
#Step 5
i = i + 1
#Step 6
if (FP * FA> 0){
a = p #a pasa a ser el punto medio
FA = FP #F(a) pasa a ser la imagen de p
} else { #si no se cumple
b = p #b es el punto medio del intervalo
}
}
#Step 7
return (paste("El metodo falló luego de ", N, "iteraciones"))
}
polinomio = function (r){
f = -PM+Precio(r,Marcha[,"t"], Marcha[,"C.F."])
return (f)
}
Raiz_Biseccion(0.7,0.9,0.000001,100)
#0.1580806
knitr::opts_chunk$set(echo = FALSE)
write_matex2 <- function(x) {
begin = "\\begin{bmatrix}"
end = "\\end{bmatrix}"
X =
apply(x, 1, function(x) {
paste(
paste(x, collapse = "&"),
"\\\\"
)
})
paste(c(begin, X, end), collapse = "")
}
opts_chunk$set(echo = FALSE)
library(flextable)
library(tidyverse)
f<- function(x){
return(2*cos(x)-exp(-10/x))
}
x<- seq(0,20, by= 0.1)
fx <- f(x)
df <- data.frame(x,fx)
gg_fx <- ggplot(data = df, aes(x="x", y="fx"))+
geom_line(linetype=1,colour="darkblue") + #Agrego la geometria
geom_hline(yintercept = 0,linetype=1) + #Agrego linea que cruza en y=0
geom_vline(xintercept = 0,linetype=1)
gg_fx
f<- function(x){
return(2*cos(x)-exp(-10/x))
}
x<- seq(0,20, by= 0.1)
fx <- f(x)
df <- data.frame(x,fx)
gg_fx <- ggplot(data = df, aes(x="x", y="fx"))+
geom_line(linetype=1,colour="darkblue") + #Agrego la geometria
geom_hline(yintercept = 0,linetype=1) + #Agrego linea que cruza en y=0
geom_vline(xintercept = 0,linetype=1)
gg_fx
gg_fx <- ggplot(data = df, aes(x=x, y=fx))+
geom_line(linetype=1,colour="darkblue") + #Agrego la geometria
geom_hline(yintercept = 0,linetype=1) + #Agrego linea que cruza en y=0
geom_vline(xintercept = 0,linetype=1)
gg_fx
gg_fx <- ggplot(data = df, aes(x=x, y=fx))+
geom_line(linetype=1,colour="darkblue") + #Agrego la geometria
geom_hline(yintercept = 0,linetype=1) + #Agrego linea que cruza en y=0
geom_vline(xintercept = 0,linetype=1)+
scale_x_continuous(name = "x", breaks = seq(0,20, by = 1)) + # Cambio ticks en eje X
gg_fx
gg_fx <- ggplot(data = df, aes(x=x, y=fx))+
geom_line(linetype=1,colour="darkblue") + #Agrego la geometria
geom_hline(yintercept = 0,linetype=1) + #Agrego linea que cruza en y=0
geom_vline(xintercept = 0,linetype=1)+
scale_x_continuous(name = "x", breaks = seq(0,20, by = 1)) # Cambio ticks en eje X
gg_fx
Secante <- function(f,p0,p1,TOL,N){
i <- 2
q0 <- f(p0)
q1 <- f(p1)
while (i <= N){ #Cambio el == por <=
p = p1 - q1*(p1-p0)/(q1-q0) #Modifico (q1-q0)/(p1-p0)
if (abs(p-p1) < TOL){ #q-q1
return(p)
}
i = i + 1
p0 = p1 #p
q0 = q1
p1 = p #p0
q1 = f(p) #f(q0)
}
return(paste('El metodo fallo luego de ', N, ' iteraciones')) #n por N
}
print(paste("Raiz 1: ",Secante(f,1,2,10^-3,100),
"Raiz 2: ", Secante(f,4.5,5,10^-3,100),
"Raiz 3: ", Secante(f,7.5,8,10^-3,100),
"Raiz 4: ", Secante(f,11,11.5,10^-3,100),
"Raiz 5: ",Secante(f,13.5,14,10^-3,100),
"Raiz 6: ", Secante(f,17,18,,10^-3,100)))
Secante <- function(f,p0,p1,TOL,N){
i <- 2
q0 <- f(p0)
q1 <- f(p1)
while (i <= N){ #Cambio el == por <=
p = p1 - q1*(p1-p0)/(q1-q0) #Modifico (q1-q0)/(p1-p0)
if (abs(p-p1) < TOL){ #q-q1
return(p)
}
i = i + 1
p0 = p1 #p
q0 = q1
p1 = p #p0
q1 = f(p) #f(q0)
}
return(paste('El metodo fallo luego de ', N, ' iteraciones')) #n por N
}
print(paste("Raiz 1: ",Secante(f,1,2,10^-3,100),
"Raiz 2: ", Secante(f,4.5,5,10^-3,100),
"Raiz 3: ", Secante(f,7.5,8,10^-3,100),
"Raiz 4: ", Secante(f,11,11.5,10^-3,100),
"Raiz 5: ",Secante(f,13.5,14,10^-3,100),
"Raiz 6: ", Secante(f,17,18,10^-3,100)))
set.seed(NroReg)
nit = sample(c(5,7,9), size =1)
x0 = 20-round(rnorm(1,5,2),2)
x1 = x0 + 1
NroReg = 900071
d1 = floor( NroReg/10^5 )
d2 = floor( (NroReg - d1*10^5)/10^4 )
d3 = floor( (NroReg - d1*10^5 - d2*10^4)/10^3 )
d4 = floor( (NroReg - d1*10^5 - d2*10^4 - d3*10^3)/10^2 )
d5 = floor( (NroReg - d1*10^5 - d2*10^4 - d3*10^3 - d4*10^2)/10^1)
d6 = floor( (NroReg - d1*10^5 - d2*10^4 - d3*10^3 - d4*10^2 - d5*10^1)/10^0)
set.seed(NroReg)
nit = sample(c(5,7,9), size =1)
x0 = 20-round(rnorm(1,5,2),2)
x1 = x0 + 1
Secante(f,x0,x1,10^-3,nit)
Secante <- function(f,p0,p1,TOL,N){
i <- 2
q0 <- f(p0)
q1 <- f(p1)
while (i <= N){ #Cambio el == por <=
p = p1 - q1*(p1-p0)/(q1-q0) #Modifico (q1-q0)/(p1-p0)
print(paste("N: ", i , "| p: " ,p))
if (abs(p-p1) < TOL){ #q-q1
return(p)
}
i = i + 1
p0 = p1 #p
q0 = q1
p1 = p #p0
q1 = f(p) #f(q0)
}
return(paste('El metodo fallo luego de ', N, ' iteraciones')) #n por N
}
Secante(f,x0,x1,10^-3,nit)
f<- function(x){
return(2*cos(x)-exp(-10/x))
}
set.seed(NroReg)
nit = sample(c(5,7,9), size =1)
x0 = 20-round(rnorm(1,5,2),2)
x1 = x0 + 1
Secante(f,x0,x1,10^-3,nit)
Secante <- function(f,p0,p1,TOL,N){
i <- 2
q0 <- f(p0)
q1 <- f(p1)
while (i <= N){ #Cambio el == por <=
p = p1 - q1*(p1-p0)/(q1-q0) #Modifico (q1-q0)/(p1-p0)
print(paste("N: ", i , "| p: " ,p))
if (abs(p-p1) < TOL){ #q-q1
return(p)
}
i = i + 1
p0 = p1 #p
q0 = q1
p1 = p #p0
q1 = f(p) #f(q0)
}
return(paste('El metodo fallo luego de ', N, ' iteraciones')) #n por N
}
Secante(f,x0,x1,10^-3,nit)
f<- function(x){
return(x^2 - cos(x))
}
g <- function(X){
return(sqrt(cos(x)))
}
x<- seq(-5,5, by=0.5)
gx <- g(x)
df <- data.frame(x,gx)
gg_gx = ggplot(data = df)+
geom_line(linetype= 1, colour ="blue")+
aes(x=x, y =gx)+
geom_vline(xintercept = 0, linetype = 1) +
geom_hline(yintercept = 0, linetype = 1)+
geom_abline(intercept = 0,slope=1,linetype=2)
gg_fx
f<- function(x){
return(x^2 *cos(x))
}
g <- function(X){
return(x - x^2 *cos(x))
}
x<- seq(-5,5, by=0.5)
gx <- g(x)
df <- data.frame(x,gx)
gg_gx = ggplot(data = df)+
geom_line(linetype= 1, colour ="blue")+
aes(x=x, y =gx)+
geom_vline(xintercept = 0, linetype = 1) +
geom_hline(yintercept = 0, linetype = 1)+
geom_abline(intercept = 0,slope=1,linetype=2)
gg_fx
gg_gx
gg_gx = ggplot(data = df)+
geom_line(linetype= 1, colour ="blue")+
aes(x=x, y =gx)+
geom_vline(xintercept = 0, linetype = 1) +
geom_hline(yintercept = 0, linetype = 1)+
geom_abline(intercept = 0,slope=1,linetype=2)+
scale_x_continuous(name ="x", breaks = seq(-5,5,by=0.5))
gg_gx
para derivar
gd <- expression(x - x^2 *cos(x))
dg <- D(gd,"x")
dg
gprima <- function(x){
return(1 - (2 * x * cos(x) - x^2 * sin(x)))
}
gprima(-5)
gprima(-4)
gprima(-1.5)
# Intervalo [-5;-4.5]
x <- seq(-5, -4.5, by =0.1)
#Genero los puntos
fprimax <- fprima(x)
#Creo un data frame con los x e y
df <- data.frame(x, fprimax)
#Lo imprimo
df
# Intervalo [-5;-4.5]
x <- seq(-5, -4.5, by =0.1)
#Genero los puntos
gprimax <- gprima(x)
#Creo un data frame con los x e y
df <- data.frame(x, gprimax)
#Lo imprimo
df
# Intervalo [-2.5;-1.5]
x <- seq(-2, -1.5, by =0.1)
#Genero los puntos
gprimax <- gprima(x)
#Creo un data frame con los x e y
df <- data.frame(x, gprimax)
#Lo imprimo
df
]
x <- seq(-0.1, 0.1, by =0.01)
#Genero los puntos
gprimax <- gprima(x)
#Creo un data frame con los x e y
df <- data.frame(x, gprimax)
#Lo imprimo
df
x <- seq(-2, -1.5, by =0.1)
#Genero los puntos
gprimax <- gprima(x)
#Creo un data frame con los x e y
df <- data.frame(x, gprimax)
#Lo imprimo
df
Intervalo [1.5;2]
x <- seq(1.5, 2, by =0.1)
#Genero los puntos
gprimax <- gprima(x)
#Creo un data frame con los x e y
df <- data.grame(x, gprimax)
#Lo imprimo
df
x <- seq(4.5, 5, by =0.1)
#Genero los puntos
gprimax <- gprima(x)
#Creo un data frame con los x e y
df <- data.frame(x, gprimax)
#Lo imprimo
df
Punto_Fijo <- function (P0,TOL,N){
i=1
while(i<=N){
p <- g(P0)
if(abs(p-P0) < TOL){
return(p)
}
i=1+i
P0=p
}
return(paste("El metodo fracaso luego de ",N," iteraciones"))
}
Punto_Fijo(0.1,10^-3,100)
#Método de punto fijo
PuntoFijo <- function(p0, n = 100, tol){
#Donde p0 es la aproximación inicial
#El número máximo de iteraciones n viene por default en 100
#Y tol es la toleranacia al error
#Instancio las listas vacias
lista_p <- c(NULL)
lista_gp <- c(NULL)
for (i in 1:n) {
#Calculo p
p <- g(p0)
lista_p[i] <- p0
lista_gp[i] <- p
if(abs(p-p0) <= tol){
#Creo un data frame con las listas
datos <- data.frame(lista_p, lista_gp)
colnames(datos) <- c("P", "G(P)")
print(datos)
return(p)
}
p0 <- p
}
#En el caso de que falle el método
return(paste('El método falla luego de: ', n, ' iteraciones'))
}
raiz <- PuntoFijo(p0 = 0.1, tol = 0.00001)
print(paste("La raiz es: ", raiz))
knitr::opts_chunk$set(echo = FALSE)
write_matex2 <- function(x) {
begin = "\\begin{bmatrix}"
end = "\\end{bmatrix}"
X =
apply(x, 1, function(x) {
paste(
paste(x, collapse = "&"),
"\\\\"
)
})
paste(c(begin, X, end), collapse = "")
}
View(write_matex2)
