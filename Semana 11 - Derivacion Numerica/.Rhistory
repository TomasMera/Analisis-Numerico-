derivada2ptos<-function(x, y, xindice, H = T){ #será progresivo por H = True
n = length(y)
yprima = c(rep(NA,n))
if(H == T){#Progresivo
h = diff(x)[1]
if(missing(xindice)){
for (i in 1:(n - 1)) {
yprima[i] = (y[i+1] - y[i])/h
}
tabla = cbind.data.frame(x, y, yprima)
return(tabla)
}
else{
if(xindice == n){
return("Este valor no se puede calcular")
}
else{
yprima[xindice] = (y[xindice+1] - y[xindice])/h
return(yprima[xindice])
}
}
}
else{#Regresivo
h = -diff(x)[1]
if(missing(xindice)){
for (i in 2:n) {
yprima[i] = (y[i-1] - y[i])/h
}
tabla = cbind.data.frame(x, y, yprima)
return(tabla)
}
else{
if(xindice == 1){
return("Este valor no se puede calcular")
}
else{
yprima[xindice] = (y[xindice-1] - y[xindice])/h
return(yprima[xindice])
}
}
}
}
derivada2ptos(x, y, 3, H = T)
x = c(0.5,0.6,0.7)
y = c(0.4794,0.5646,0.6442)
derivada2ptos<-function(x, y, xindice, H = T){ #será progresivo por H = True
n = length(y)
yprima = c(rep(NA,n))
if(H == T){#Progresivo
h = diff(x)[1]
if(missing(xindice)){
for (i in 1:(n - 1)) {
yprima[i] = (y[i+1] - y[i])/h
}
tabla = cbind.data.frame(x, y, yprima)
return(tabla)
}
else{
if(xindice == n){
return("Este valor no se puede calcular")
}
else{
yprima[xindice] = (y[xindice+1] - y[xindice])/h
return(yprima[xindice])
}
}
}
else{#Regresivo
h = -diff(x)[1]
if(missing(xindice)){
for (i in 2:n) {
yprima[i] = (y[i-1] - y[i])/h
}
tabla = cbind.data.frame(x, y, yprima)
return(tabla)
}
else{
if(xindice == 1){
return("Este valor no se puede calcular")
}
else{
yprima[xindice] = (y[xindice-1] - y[xindice])/h
return(yprima[xindice])
}
}
}
}
derivada2ptos(x, y, 3, H = T)
derivada2ptos(x, y, 2, H = T)
derivada2ptos(x, y, 0, H = T)
derivada2ptos(x, y, 1, H = T)
derivada2ptos(x, y, H = T)  ##
derivada2ptos(x, y, H = F) ##Regresiva
x = c(0,0.2,0.4)
y = c(0,0.74140,1.3718)
derivada2ptos(x, y, H = T)  ## Progresiva
derivada2ptos(x, y, H = F) ##Regresiva
x = c(2.9,3,3.1,3.2)
y = c(-4.827866,-4.240058,-3.496909,-2.596792)
derivada3ptos<-function(x, y, xindice, H = T, endpoint = F){
n = length(y)
yprima = c(rep(NA,n))
if(H == T){ #If para fórmulas progresivas
h = diff(x)[1]
if(endpoint == F){
if(missing(xindice)){
for (i in 2:(n - 1)) {
yprima[i] = (-y[i-1] + y[i+1])/(2*h)
}
tabla = cbind.data.frame(x, y, yprima)
return(tabla)
}
else{
if(xindice == 1 || xindice == n){
return("Este valor no se puede calcular")
}
else{
yprima[xindice] = (-y[xindice-1] + y[xindice+1])/(2*h)
return(yprima[xindice])
}
}
}else{
if(missing(xindice)){
for (i in 1:(n - 2)) {
yprima[i] = (-3*y[i] + 4*y[i+1] - y[i+2])/(2*h)
}
tabla = cbind.data.frame(x, y, yprima)
return(tabla)
}
else{
if(xindice == n || xindice == n-1){
return("Este valor no se puede calcular")
}
else{
yprima[xindice] = (-3*y[xindice] + 4*y[xindice+1] - y[xindice+2])/(2*h)
return(yprima[xindice])
}
}
}
}else{#Formulas regresivas ----
h = -diff(x)[1]
if(endpoint == F){
if(missing(xindice)){
for (i in 2:(n - 1)) {
yprima[i] = (-y[i+1] + y[i-1])/(2*h)
}
tabla = cbind.data.frame(x, y, yprima)
return(tabla)
}
else{
if(xindice == 1 || xindice == n){
return("Este valor no se puede calcular")
}
else{
yprima[xindice] = (-y[xindice+1] + y[xindice-1])/(2*h)
return(yprima[xindice])
}
}
}else{
if(missing(xindice)){
for (i in 3:n) {
yprima[i] = (-3*y[i] + 4*y[i-1] - y[i-2])/(2*h)
}
tabla = cbind.data.frame(x, y, yprima)
return(tabla)
}
else{
if(xindice == 1 || xindice == 2){
return("Este valor no se puede calcular")
}
else{
yprima[xindice] = (-3*y[xindice] + 4*y[xindice-1] - y[xindice-2])/(2*h)
return(yprima[xindice])
}
}
}
}
}
derivada3ptos(x, y, 3, H = F, endpoint = F)
derivada3ptos(x, y, H = F, endpoint = F)
derivada3ptos(x, y, H = F, endpoint = F)
derivada3ptos(x, y, H = T, endpoint = T)
derivada3ptos(x, y, H = F, endpoint = T)
y = c(16.94410,17.56492,18.19056,18.82091)
x = c(8.1,8.3,8.5,8.7)
derivada3ptos(x, y, H = T, endpoint = F) #Progresiva, middlepoint --> Saco los dos puntos del medio
derivada3ptos(x, y, H = T, endpoint = T) #Progresiva, Endpoint --> Saco el primer punto
derivada3ptos(x, y, H = F, endpoint = T) #Regresiva, Endpoint --> Saco el ultimo punto
derivada3ptos(x, y,4, H = F, endpoint = T) #Regresiva, Endpoint --> Saco el ultimo punto
derivada3ptos(x, y, 1, H = T, endpoint = T) #Progresiva, Endpoint --> Saco el primer punto
derivada5ptos(x, y , 1 , H = T, endpoint = T)
x = c(0.2,0.4,0.6,0.8,1)
y = c(0.9798652, 0.9177710,0.8080348,0.6386093,0.3843735)
derivada5ptos<-function(x, y, xindice, H = T, endpoint = F){
n = length(y)
yprima = c(rep(NA,n))
if(H == T){#If para fórmulas progresivas
h = diff(x)[1]
if(endpoint == F){
if(missing(xindice)){
for (i in 3:(n - 2)) {
yprima[i] = (y[i-2] - 8*y[i-1] + 8*y[i+1] - y[i+2])/(12*h)
}
tabla = cbind.data.frame(x, y, yprima)
return(tabla)
}
else{
if(xindice == n || xindice == n-1 || xindice == 1 || xindice == 2){
return("Este valor no se puede calcular")
}
else{
yprima[xindice] = (y[xindice-2] - 8*y[xindice-1] + 8*y[xindice+1] - y[xindice+2])/(12*h)
return(yprima[xindice])
}
}
}else{
if(missing(xindice)){
for (i in 1:(n - 4)) {
yprima[i] = (-25*y[i] + 48*y[i+1] - 36*y[i+2] + 16*y[i+3] - 3*y[i+4])/(12*h)
}
tabla = cbind.data.frame(x, y, yprima)
return(tabla)
}
else{
if(xindice == n || xindice == n-1 || xindice == n-2 || xindice == n-3){
return("Este valor no se puede calcular")
}
else{
yprima[xindice] = (-25*y[xindice] + 48*y[xindice+1] - 36*y[xindice+2] + 16*y[xindice+3] - 3*y[xindice+4])/(12*h)
return(yprima[xindice])
}
}
}
}
else{#If para fórmulas regresivas
h = -diff(x)[1]
if(endpoint == F){
if(missing(xindice)){
for (i in 3:(n - 2)) {
yprima[i] = (y[i+2] - 8*y[i+1] + 8*y[i-1] - y[i-2])/(12*h)
}
tabla = cbind.data.frame(x, y, yprima)
return(tabla)
}
else{
if(xindice == n || xindice == n-1 || xindice == 1 || xindice == 2){
return("Este valor no se puede calcular")
}
else{
yprima[xindice] = (y[xindice+2] - 8*y[xindice+1] + 8*y[xindice-1] - y[xindice-2])/(12*h)
return(yprima[xindice])
}
}
}else{
if(missing(xindice)){
for (i in 5:n) {
yprima[i] = (-25*y[i] + 48*y[i-1] - 36*y[i-2] + 16*y[i-3] - 3*y[i-4])/(12*h)
}
tabla = cbind.data.frame(x, y, yprima)
return(tabla)
}
else{
if(xindice == 1 || xindice == 2 || xindice == 3 || xindice == 4){
return("Este valor no se puede calcular")
}
else{
yprima[xindice] = (-25*y[xindice] + 48*y[xindice-1] - 36*y[xindice-2] + 16*y[xindice-3] - 3*y[xindice-4])/(12*h)
return(yprima[xindice])
}
}
}
}
}
derivada5ptos(x, y , 1 , H = T, endpoint = T)
derivada5ptos(x, y , 5 , H = F, endpoint = T)
derivada5ptos(x, y , 5 , H = T, endpoint = T) #El ultimo punto lo calculo con una regresiva
derivada5ptos(x, y , 1 , H = T, endpoint = F) #El punto del medio lo calculo con middlepoint
derivada5ptos(x, y , 3 , H = T, endpoint = F) #El punto del medio lo calculo con middlepoint
derivada5ptos(x, y , 3 , H = F, endpoint = F) #El punto del medio lo calculo con middlepoint
derivada5ptos(x, y , H = F, endpoint = F) #El punto del medio lo calculo con middlepoint
x = c(6.41,6.76,7.11,7.46,7.81,8.16,8.51)
y = c(4.0951,5.1989,6.1303,6.7893,7.1079,7.0591,6.6598)
derivada2ptos(x, y, H = T)
derivada2ptos(x, y, H = F) #Diferencia Regresiva
derivada3ptos(x, y, H = T, endpoint = F)
derivada5ptos(x, y, H = T, endpoint = T) #Endpoint de 5 puntos
derivada5ptos(x, y, H = F, endpoint = T)
x = c(2.31,2.91,3.51,4.11,4.71,5.31,5.91)
y = c(3.8915,2.8249,1.4308,0.3549,0.0994,0.8591,2.4595)
derivada2ptos(x, y, H = T)  #Diferencia Progresiva
derivada2ptos(x, y, H = F) #Diferencia Regresiva
derivada3ptos(x, y, H = T, endpoint = F) #Middlepoint de 3 puntos
derivada5ptos(x, y, H = T, endpoint = T) #Endpoint de 5 puntos
derivada5ptos(x, y, H = F, endpoint = T) #Hago progresiva y regresiva para calcular los valores extremos inferiores y superiores
x = c(2.31,2.91,3.51,4.11,4.71,5.31,5.91)
y = c(3.8915,2.8249,1.4308,0.3549,0.0994,0.8591,2.4595)
derivada_segunda = function(x, y, xindice){
h = diff(x)[1]
n = length(y)
yprima = c(rep(NA,n))
if(missing(xindice)){
for (i in 2:(n - 1)) {
yprima[i] = (y[i-1] - 2*y[i] + y[i+1])/(h^2)
}
tabla = cbind.data.frame(x, y, yprima)
return(tabla)
}
else{
if(xindice == 1 || xindice == n){
return("Este valor no se puede calcular")
}
else{
yprima[xindice] = (y[xindice-1] - 2*y[xindice] + y[xindice+1])/(h^2)
return(yprima[xindice])
}
}
}
derivada_segunda(x,y,4)
derivada_segunda = function(x, y, xindice){
h = 1.20
n = length(y)
yprima = c(rep(NA,n))
if(missing(xindice)){
for (i in 2:(n - 1)) {
yprima[i] = (y[i-1] - 2*y[i] + y[i+1])/(h^2)
}
tabla = cbind.data.frame(x, y, yprima)
return(tabla)
}
else{
if(xindice == 1 || xindice == n){
return("Este valor no se puede calcular")
}
else{
yprima[xindice] = (y[xindice-1] - 2*y[xindice] + y[xindice+1])/(h^2)
return(yprima[xindice])
}
}
}
derivada_segunda(x,y,4)
derivada_segunda = function(x, y, xindice, h){
n = length(y)
yprima = c(rep(NA,n))
if(missing(xindice)){
for (i in 2:(n - 1)) {
yprima[i] = (y[i-1] - 2*y[i] + y[i+1])/(h^2)
}
tabla = cbind.data.frame(x, y, yprima)
return(tabla)
}
else{
if(xindice == 1 || xindice == n){
return("Este valor no se puede calcular")
}
else{
yprima[xindice] = (y[xindice-1] - 2*y[xindice] + y[xindice+1])/(h^2)
return(yprima[xindice])
}
}
}
derivada_segunda(x,y,4, 0.6)
derivada_segunda(x,y,4, 1.2)
derivada_segunda(x,y,4,1.2)
qnorm(0.05)
0.634^2
